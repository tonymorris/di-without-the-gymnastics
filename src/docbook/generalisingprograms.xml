<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"[
    <!ENTITY ellipsis "&#8230;">
]>

<sect1 id="GeneralisingPrograms" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Generalising Programs</title>
  <sect2>
    <title>A Trivial Program</title>
    <programlisting>
val a = e1
val b = e2(a)
val c = e3(a, b)
val d = e2(b)</programlisting>
    <itemizedlist>
      <listitem>
        <para>
          Remove the <code>val</code> keyword.
        </para>
      </listitem>
      <listitem>
        <para>
          Replace the <code>=</code> symbol with <code>&lt;-</code>
        </para>
      </listitem>
      <listitem>
        <para>
          Wrap the program in <code>for</code> and <code>yield</code> keywords.
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2>
    <title>A Trivial Program in Identity</title>
    <programlisting>
for {
  a &lt;- e1
  b &lt;- e2(a)
  c &lt;- e3(a, b)
  d &lt;- e2(b)
} yield d</programlisting>
    <para>
      We can transform our programs like this by wrapping values (<code>e1</code>, etc.) in <code>Identity</code>.
      <programlisting>
case class Identity[A](a: A) {
  def map[B](f: A => B): Identity[B] = Identity(f(a))
  def flatMap[B](f: A => Identity[B]): Identity[B] = f(a)
}</programlisting>
    </para>
  </sect2>
  <sect2>
    <title>Add a Bit of Context</title>
    <itemizedlist>
      <listitem>
        <para>
          OK, so if <code>e1</code> was of the type <code>Int</code>, it now becomes <code>Identity[Int]</code> and so on.
        </para>
      </listitem>
      <listitem>
        <para>
          but <code>Identity</code> is quite a boring context.
        </para>
      </listitem>
      <listitem>
        <para>
          Are there more structures that add more interesting context to values of any type?
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2>
    <title>Reader</title>
    <programlisting>
case class Read[A](rd: Context => A) {
  def map[B](f: A => B): Read[B] =
      Read(f compose rd)
  def flatMap[B](f: A => Read[B]): Read[B] =
      Read(c => f(rd(c)) rd c)
}</programlisting>
    <itemizedlist>
      <listitem>
        <para>
          Now values that were once typed <code>T</code> becomes values with the type <code>Read[T]</code>.
        </para>
      </listitem>
      <listitem>
        <para>
          In other words, these values can access a <code>Context</code> to produce their result.
        </para>
      </listitem>
      <listitem>
        <para>
          &ellipsis;and most importantly&ellipsis;
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2>
    <title>Reader Monad</title>
    <programlisting>
for {
  a &lt;- e1
  b &lt;- e2(a)
  c &lt;- e3(a, b)
  d &lt;- e2(b)
} yield d</programlisting>
    <itemizedlist>
      <listitem>
        <para>
          &ellipsis;the program remains unchanged.
        </para>
      </listitem>
      <listitem>
        <para>
          Here, we are computing values with a context available, but <emphasis>without explicitly passing it through our program</emphasis>.
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
</sect1>