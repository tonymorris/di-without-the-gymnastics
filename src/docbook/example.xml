<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"[
    <!ENTITY ellipsis "&#8230;">
    ]>

<sect1 id="Example" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Example</title>
  <sect2>
    <title>A simple enough example?</title>
    <itemizedlist>
      <listitem>
        <para>
          Can we find an example good enough to demonstrate the point, but small enough to fit on slides?! :)
        </para>
      </listitem>
      <listitem>
        <para>
          We can do this <emphasis>for any value</emphasis> in our context.
        </para>
      </listitem>
      <listitem>
        <para>
          Let our context be a hostname and port pair, <code>(String, Int)</code>.
        </para>
      </listitem>
      <listitem>
        <para>
          We are going to <emphasis>inject</emphasis> this read-only dependency into our program, so that:
          <itemizedlist>
            <listitem>
              <para>
                values that require access to it can do so
              </para>
            </listitem>
            <listitem>
              <para>
                the dependency is not explicitly passed around our program
              </para>
            </listitem>
            <listitem>
              <para>
                our program maintains <emphasis>referential transparency</emphasis> &mdash; <emphasis>no variables</emphasis>, and therefore, the benefits that follow
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2>
    <title>Set up Libraries</title>
    <itemizedlist>
      <listitem>
        <programlisting>
// Hostname+port reader
case class CRead[A](rd: (String, Int) => A) {
  def map(f: A => B): CRead[B] =
    sys.error("todo")
  def flatMap(f: A => CRead[B]): CRead[B] =
    sys.error("todo")
}</programlisting>
      </listitem>
      <listitem>
        <programlisting>
// Ignore the context, lift into CRead
def point[A](a: => A): CRead[A] =
    CRead(_ => a)</programlisting>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2>
    <title>Usage example</title>
    <programlisting>
for {
  _ &lt;- log("connect: %s:%s")
  w &lt;- getWibble
  val v = w modL biggen
  u &lt;- setWibble
  _ &lt;- log("disconnect %s:%s")
} yield u      
    </programlisting>
    <para>
      Some points of note:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <code>log: String => CRead[X]</code>
        </para>
      </listitem>
      <listitem>
        <para>
          <code>getWibble/setWibble: CRead[Wibble]</code>
        </para>
      </listitem>
      <listitem>
        <para>
          <code>modL</code> is a <emphasis>lens operator</emphasis> for working with immutable records.
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
</sect1>