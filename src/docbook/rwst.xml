<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"[
    <!ENTITY ellipsis "&#8230;">
    ]>

<sect1 id="RWST" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Reader/Writer/State Transformer</title>
  <subtitle>The Essence of Injecting Dependencies</subtitle>
  <sect2>
    <title>Putting it All Together</title>
    <itemizedlist>
      <listitem>
        <para>
          Dependency Injection is, quite concisely, a specialisation of the reader/writer/state monad transformer.
        </para>
      </listitem>
      <listitem>
        <para>
          The <emphasis>what what</emphasis> transformer?
        </para>
      </listitem>
      <listitem>
        <para>
          The transformer that is stacked with <code>Reader</code>, <code>Writer</code>, <code>State</code> and an arbitrary context
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2>
    <title>Reminder</title>
    <itemizedlist>
      <listitem>
        <para>
          <code>case class Reader[R, A](f: R => A)</code>
        </para>
      </listitem>
      <listitem>
        <para>
          <code>case class Writer[W, A](w: (W, A))</code>
        </para>
      </listitem>
      <listitem>
        <para>
          <code>case class State[S, A](f: S => (A, S))</code>
        </para>
      </listitem>
      <listitem>
        <para>
          Reader+Writer+State?
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2>
    <title>RWS Transformer in Scala</title>
    <programlisting><xi:include href="RWST.scala" parse="text"/></programlisting>
  </sect2>
  <sect2>
    <title>RWS Transformer in Haskell</title>
    <programlisting><xi:include href="RWST.hs" parse="text"/></programlisting>
  </sect2>
</sect1>
